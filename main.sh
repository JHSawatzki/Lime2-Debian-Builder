#!/bin/bash
#
# Copyright (c) 2014 Igor Pecovnik, igor.pecovnik@gma**.com
#
# www.igorpecovnik.com / images + support
#
# Main branch
#


#--------------------------------------------------------------------------------------------------------------------------------
# currently there is no option to create an image without root
# you can compile a kernel but you can complete the whole process
# if you find a way, please submit code corrections. Thanks.
#--------------------------------------------------------------------------------------------------------------------------------
if [ "$UID" -ne 0 ]
	then echo "Please run as root"
	exit
fi


#--------------------------------------------------------------------------------------------------------------------------------
# Load libraries
#--------------------------------------------------------------------------------------------------------------------------------
source $SRC/Lime2-Debian-Builder/configuration.sh			# Board configuration
source $SRC/Lime2-Debian-Builder/boards.sh 					# Board specific install
source $SRC/Lime2-Debian-Builder/common.sh 					# Functions


#--------------------------------------------------------------------------------------------------------------------------------
# The name of the job
#--------------------------------------------------------------------------------------------------------------------------------
VERSION="${BOARD^} $DISTRIBUTION $REVISION $RELEASE $BRANCH"
if [[ $U6PRO == "yes" ]]; then
	VERSION=$VERSION" U6Pro"
fi


#--------------------------------------------------------------------------------------------------------------------------------
# let's start with fresh screen
#--------------------------------------------------------------------------------------------------------------------------------
clear


#--------------------------------------------------------------------------------------------------------------------------------
# optimize build time with 100% CPU usage
#--------------------------------------------------------------------------------------------------------------------------------
CPUS=$(grep -c 'processor' /proc/cpuinfo)
if [ "$USEALLCORES" = "yes" ]; then
	CTHREADS="-j$(($CPUS + $CPUS/2))";
else
	CTHREADS="-j${CPUS}";
fi


#--------------------------------------------------------------------------------------------------------------------------------
# to display build time at the end
#--------------------------------------------------------------------------------------------------------------------------------
start=`date +%s`


#--------------------------------------------------------------------------------------------------------------------------------
# display what we are doing
#--------------------------------------------------------------------------------------------------------------------------------
echo "Building $VERSION."


#--------------------------------------------------------------------------------------------------------------------------------
# download packages for host
#--------------------------------------------------------------------------------------------------------------------------------
download_host_packages
clear
echo "Building $VERSION."


#--------------------------------------------------------------------------------------------------------------------------------
# fetch_from_github [repository, sub directory]
#--------------------------------------------------------------------------------------------------------------------------------
mkdir -p $DEST
fetch_from_github "$BOOTLOADER" "$BOOTSOURCE"
fetch_from_github "$LINUXKERNEL" "$LINUXSOURCE"
if [[ -n "$MISC1" ]]; then fetch_from_github "$MISC1" "$MISC1_DIR"; fi
if [[ -n "$MISC2" ]]; then fetch_from_github "$MISC2" "$MISC2_DIR"; fi
if [[ -n "$MISC3" ]]; then fetch_from_github "$MISC3" "$MISC3_DIR"; fi

grab_kernel_version


#--------------------------------------------------------------------------------------------------------------------------------
# Compile source or choose already packed kernel
#--------------------------------------------------------------------------------------------------------------------------------
if [ "$SOURCE_COMPILE" = "yes" ]; then
	# Patching sources
	patching_sources

	# Grab linux kernel version
	grab_kernel_version

	# Compile boot loader
	compile_uboot

	# compile kernel and create archives
	compile_kernel
else
	# Compile u-boot if not exits in cache
	CHOOSEN_UBOOT="$BOARD"_"$BRANCH"_u-boot_"$VER".tgz
	if [ ! -f "$DEST/u-boot-image/$CHOOSEN_UBOOT" ]; then
		compile_uboot
	fi

	# choose kernel from ready made
	choosing_kernel
fi


#--------------------------------------------------------------------------------------------------------------------------------
# create or use prepared root file-system
#--------------------------------------------------------------------------------------------------------------------------------
create_debian_template


mount_debian_template


#--------------------------------------------------------------------------------------------------------------------------------
# add kernel to the image

#--------------------------------------------------------------------------------------------------------------------------------
install_kernel


#--------------------------------------------------------------------------------------------------------------------------------
# install board specific applications

#--------------------------------------------------------------------------------------------------------------------------------
install_board_specific


#--------------------------------------------------------------------------------------------------------------------------------
# install external applications
#--------------------------------------------------------------------------------------------------------------------------------
install_external_applications


#--------------------------------------------------------------------------------------------------------------------------------
# add some summary to the image
#--------------------------------------------------------------------------------------------------------------------------------
fingerprint_image "$DEST/sdcard/root/readme.txt"


#--------------------------------------------------------------------------------------------------------------------------------
# closing image
#--------------------------------------------------------------------------------------------------------------------------------
closing_image


end=`date +%s`
runtime=$(((end-start)/60))
echo "Runtime $runtime min."
